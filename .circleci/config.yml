version: 2.1

executors:
  default:
    docker:
      - image: cimg/base:stable
    working_directory: ~/repo

jobs:
  test-go:
    docker:
      - image: cimg/go:1.24.2
    steps:
      - checkout
      - restore_cache:
          key: go-mod-{{ checksum "go.sum" }}
      - run:
          name: Download Go modules
          command: go mod download
      - run:
          name: Print go mod help instructions
          command: |
            echo "go mod download will fail if you have private repositories
            1. Add GITHUB_TOKEN and GITHUB_USER to an org context (see: https://circleci.com/docs/contexts/)
            2. Add go env -w GOPRIVATE=github.com/<OrgNameHere>
            3. Configure git credentials:
               git config --global url.\"https://\$GITHUB_USER:\$GITHUB_TOKEN@github.com/<OrgNameHere>/\".insteadOf \"https://github.com/<OrgNameHere>/\"
            4. Then run go mod download again."
          when: on_fail
      - save_cache:
          key: go-mod-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
      - run:
          name: Run tests
          command: gotestsum --junitfile junit.xml
      - store_test_results:
          path: junit.xml

  build-go-executables:
    docker:
      - image: cimg/go:1.24.2
    steps:
      - checkout
      - restore_cache:
          key: go-mod-{{ checksum "go.sum" }}
      - run:
          name: Download Go modules
          command: go mod download
      - save_cache:
          key: go-mod-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
      - run:
          name: Create the ~/artifacts directory
          command: mkdir -p ~/artifacts
      - run:
          name: Build executables
          command: go build -o ~/artifacts ./...
      - store_artifacts:
          path: ~/artifacts
          destination: executables

  tag_on_main:
    executor: default
    steps:
      - checkout
      - run:
          name: Get latest tag
          command: |
            git fetch --tags
            latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
            echo "Latest tag: $latest_tag"
            if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              major=${BASH_REMATCH[1]}
              minor=${BASH_REMATCH[2]}
              patch=${BASH_REMATCH[3]}
              new_tag="v$major.$minor.$((patch+1))"
            else
              new_tag="v1.0.0"
            fi
            echo "New tag: $new_tag"
            echo $new_tag > new_tag.txt
      - run:
          name: Create Git Tag and Push
          command: |
            new_tag=$(cat new_tag.txt)
            git config user.name "circleci"
            git config user.email "circleci@circleci.com"
            git tag $new_tag
            git push https://$GH_TOKEN@github.com/<your-username>/<your-repo>.git $new_tag

workflows:
  build-and-test:
    jobs:
      - test-go
      - build-go-executables:
          requires:
            - test-go

  tag-on-main:
    jobs:
      - tag_on_main:
          filters:
            branches:
              only: main
